// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Block_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        out_local_V_data_0_V_dout,
        out_local_V_data_0_V_empty_n,
        out_local_V_data_0_V_read,
        out_local_V_data_1_V_dout,
        out_local_V_data_1_V_empty_n,
        out_local_V_data_1_V_read,
        should_skip_0_loc_dout,
        should_skip_0_loc_empty_n,
        should_skip_0_loc_read,
        out_r_TDATA,
        out_r_TVALID,
        out_r_TREADY,
        out_r_TLAST,
        val_assign_loc_dout,
        val_assign_loc_empty_n,
        val_assign_loc_read
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [1023:0] out_local_V_data_0_V_dout;
input   out_local_V_data_0_V_empty_n;
output   out_local_V_data_0_V_read;
input  [1023:0] out_local_V_data_1_V_dout;
input   out_local_V_data_1_V_empty_n;
output   out_local_V_data_1_V_read;
input  [0:0] should_skip_0_loc_dout;
input   should_skip_0_loc_empty_n;
output   should_skip_0_loc_read;
output  [1023:0] out_r_TDATA;
output   out_r_TVALID;
input   out_r_TREADY;
output  [0:0] out_r_TLAST;
input  [0:0] val_assign_loc_dout;
input   val_assign_loc_empty_n;
output   val_assign_loc_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg out_local_V_data_0_V_read;
reg out_local_V_data_1_V_read;
reg should_skip_0_loc_read;
reg val_assign_loc_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    out_local_V_data_0_V_blk_n;
reg    out_local_V_data_1_V_blk_n;
reg    should_skip_0_loc_blk_n;
reg    out_r_TDATA_blk_n;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state3;
reg   [0:0] should_skip_0_loc_read_reg_88;
wire    ap_CS_fsm_state2;
reg    val_assign_loc_blk_n;
wire    io_acc_block_signal_op12;
reg    ap_block_state1;
reg    ap_block_state1_io;
reg   [0:0] val_assign_loc_read_reg_92;
reg   [1023:0] tmp_data_1_V_reg_102;
wire    regslice_both_out_data_V_U_apdone_blk;
reg    ap_block_state3_io;
reg   [3:0] ap_NS_fsm;
reg   [1023:0] out_r_TDATA_int;
reg    out_r_TVALID_int;
wire    out_r_TREADY_int;
wire    regslice_both_out_data_V_U_vld_out;
wire    regslice_both_out_last_V_U_apdone_blk;
reg   [0:0] out_r_TLAST_int;
wire    regslice_both_out_last_V_U_ack_in_dummy;
wire    regslice_both_out_last_V_U_vld_out;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
end

regslice_both #(
    .DataWidth( 1024 ))
regslice_both_out_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(out_r_TDATA_int),
    .vld_in(out_r_TVALID_int),
    .ack_in(out_r_TREADY_int),
    .data_out(out_r_TDATA),
    .vld_out(regslice_both_out_data_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_out_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(out_r_TLAST_int),
    .vld_in(out_r_TVALID_int),
    .ack_in(regslice_both_out_last_V_U_ack_in_dummy),
    .data_out(out_r_TLAST),
    .vld_out(regslice_both_out_last_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((1'b1 == ap_block_state3_io) | (regslice_both_out_data_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((io_acc_block_signal_op12 == 1'b0) | (ap_start == 1'b0) | (val_assign_loc_empty_n == 1'b0) | (should_skip_0_loc_empty_n == 1'b0) | (1'b1 == ap_block_state1_io) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        should_skip_0_loc_read_reg_88 <= should_skip_0_loc_dout;
        tmp_data_1_V_reg_102 <= out_local_V_data_1_V_dout;
        val_assign_loc_read_reg_92 <= val_assign_loc_dout;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state3_io) | (regslice_both_out_data_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state3_io) | (regslice_both_out_data_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_local_V_data_0_V_blk_n = out_local_V_data_0_V_empty_n;
    end else begin
        out_local_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op12 == 1'b0) | (ap_start == 1'b0) | (val_assign_loc_empty_n == 1'b0) | (should_skip_0_loc_empty_n == 1'b0) | (1'b1 == ap_block_state1_io) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_local_V_data_0_V_read = 1'b1;
    end else begin
        out_local_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_local_V_data_1_V_blk_n = out_local_V_data_1_V_empty_n;
    end else begin
        out_local_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op12 == 1'b0) | (ap_start == 1'b0) | (val_assign_loc_empty_n == 1'b0) | (should_skip_0_loc_empty_n == 1'b0) | (1'b1 == ap_block_state1_io) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_local_V_data_1_V_read = 1'b1;
    end else begin
        out_local_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4) | ((should_skip_0_loc_read_reg_88 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | ((should_skip_0_loc_read_reg_88 == 1'd1) & (1'b1 == ap_CS_fsm_state3)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (should_skip_0_loc_dout == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (should_skip_0_loc_dout == 1'd1) & (1'b1 == ap_CS_fsm_state1)))) begin
        out_r_TDATA_blk_n = out_r_TREADY_int;
    end else begin
        out_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        out_r_TDATA_int = 1024'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_r_TDATA_int = tmp_data_1_V_reg_102;
    end else if ((~((io_acc_block_signal_op12 == 1'b0) | (ap_start == 1'b0) | (val_assign_loc_empty_n == 1'b0) | (should_skip_0_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (should_skip_0_loc_dout == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        out_r_TDATA_int = 1024'd262144;
    end else if ((~((io_acc_block_signal_op12 == 1'b0) | (ap_start == 1'b0) | (val_assign_loc_empty_n == 1'b0) | (should_skip_0_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (should_skip_0_loc_dout == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        out_r_TDATA_int = out_local_V_data_0_V_dout;
    end else begin
        out_r_TDATA_int = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4))) begin
        out_r_TLAST_int = val_assign_loc_read_reg_92;
    end else if (((~((io_acc_block_signal_op12 == 1'b0) | (ap_start == 1'b0) | (val_assign_loc_empty_n == 1'b0) | (should_skip_0_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (should_skip_0_loc_dout == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | (~((io_acc_block_signal_op12 == 1'b0) | (ap_start == 1'b0) | (val_assign_loc_empty_n == 1'b0) | (should_skip_0_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (should_skip_0_loc_dout == 1'd1) & (1'b1 == ap_CS_fsm_state1)))) begin
        out_r_TLAST_int = 1'd0;
    end else begin
        out_r_TLAST_int = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (out_r_TREADY_int == 1'b1)) | ((1'b1 == ap_CS_fsm_state4) & (out_r_TREADY_int == 1'b1)) | (~((io_acc_block_signal_op12 == 1'b0) | (ap_start == 1'b0) | (val_assign_loc_empty_n == 1'b0) | (should_skip_0_loc_empty_n == 1'b0) | (1'b1 == ap_block_state1_io) | (ap_done_reg == 1'b1)) & (should_skip_0_loc_dout == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | (~((io_acc_block_signal_op12 == 1'b0) | (ap_start == 1'b0) | (val_assign_loc_empty_n == 1'b0) | (should_skip_0_loc_empty_n == 1'b0) | (1'b1 == ap_block_state1_io) | (ap_done_reg == 1'b1)) & (should_skip_0_loc_dout == 1'd1) & (1'b1 == ap_CS_fsm_state1)))) begin
        out_r_TVALID_int = 1'b1;
    end else begin
        out_r_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        should_skip_0_loc_blk_n = should_skip_0_loc_empty_n;
    end else begin
        should_skip_0_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op12 == 1'b0) | (ap_start == 1'b0) | (val_assign_loc_empty_n == 1'b0) | (should_skip_0_loc_empty_n == 1'b0) | (1'b1 == ap_block_state1_io) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        should_skip_0_loc_read = 1'b1;
    end else begin
        should_skip_0_loc_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        val_assign_loc_blk_n = val_assign_loc_empty_n;
    end else begin
        val_assign_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op12 == 1'b0) | (ap_start == 1'b0) | (val_assign_loc_empty_n == 1'b0) | (should_skip_0_loc_empty_n == 1'b0) | (1'b1 == ap_block_state1_io) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        val_assign_loc_read = 1'b1;
    end else begin
        val_assign_loc_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((io_acc_block_signal_op12 == 1'b0) | (ap_start == 1'b0) | (val_assign_loc_empty_n == 1'b0) | (should_skip_0_loc_empty_n == 1'b0) | (1'b1 == ap_block_state1_io) | (ap_done_reg == 1'b1)) & (should_skip_0_loc_dout == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if ((~((io_acc_block_signal_op12 == 1'b0) | (ap_start == 1'b0) | (val_assign_loc_empty_n == 1'b0) | (should_skip_0_loc_empty_n == 1'b0) | (1'b1 == ap_block_state1_io) | (ap_done_reg == 1'b1)) & (should_skip_0_loc_dout == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (out_r_TREADY_int == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((1'b1 == ap_block_state3_io) | (regslice_both_out_data_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (out_r_TREADY_int == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((io_acc_block_signal_op12 == 1'b0) | (ap_start == 1'b0) | (val_assign_loc_empty_n == 1'b0) | (should_skip_0_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_io = (((should_skip_0_loc_dout == 1'd0) & (out_r_TREADY_int == 1'b0)) | ((should_skip_0_loc_dout == 1'd1) & (out_r_TREADY_int == 1'b0)));
end

always @ (*) begin
    ap_block_state3_io = (((should_skip_0_loc_read_reg_88 == 1'd0) & (out_r_TREADY_int == 1'b0)) | ((should_skip_0_loc_read_reg_88 == 1'd1) & (out_r_TREADY_int == 1'b0)));
end

assign io_acc_block_signal_op12 = (out_local_V_data_1_V_empty_n & out_local_V_data_0_V_empty_n);

assign out_r_TVALID = regslice_both_out_data_V_U_vld_out;

endmodule //Block_proc
