// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Block_proc_HH_
#define _Block_proc_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct Block_proc : public sc_module {
    // Port declarations 23
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<1024> > out_local_V_data_0_V_dout;
    sc_in< sc_logic > out_local_V_data_0_V_empty_n;
    sc_out< sc_logic > out_local_V_data_0_V_read;
    sc_in< sc_lv<1024> > out_local_V_data_1_V_dout;
    sc_in< sc_logic > out_local_V_data_1_V_empty_n;
    sc_out< sc_logic > out_local_V_data_1_V_read;
    sc_in< sc_lv<1> > should_skip_0_loc_dout;
    sc_in< sc_logic > should_skip_0_loc_empty_n;
    sc_out< sc_logic > should_skip_0_loc_read;
    sc_out< sc_lv<1024> > out_r_TDATA;
    sc_out< sc_logic > out_r_TVALID;
    sc_in< sc_logic > out_r_TREADY;
    sc_out< sc_lv<1> > out_r_TLAST;
    sc_in< sc_lv<1> > val_assign_loc_dout;
    sc_in< sc_logic > val_assign_loc_empty_n;
    sc_out< sc_logic > val_assign_loc_read;


    // Module declarations
    Block_proc(sc_module_name name);
    SC_HAS_PROCESS(Block_proc);

    ~Block_proc();

    sc_trace_file* mVcdFile;

    regslice_both<1024>* regslice_both_out_data_V_U;
    regslice_both<1>* regslice_both_out_last_V_U;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > out_local_V_data_0_V_blk_n;
    sc_signal< sc_logic > out_local_V_data_1_V_blk_n;
    sc_signal< sc_logic > should_skip_0_loc_blk_n;
    sc_signal< sc_logic > out_r_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > should_skip_0_loc_read_reg_88;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > val_assign_loc_blk_n;
    sc_signal< sc_logic > io_acc_block_signal_op12;
    sc_signal< bool > ap_block_state1;
    sc_signal< bool > ap_block_state1_io;
    sc_signal< sc_lv<1> > val_assign_loc_read_reg_92;
    sc_signal< sc_lv<1024> > tmp_data_1_V_reg_102;
    sc_signal< sc_logic > regslice_both_out_data_V_U_apdone_blk;
    sc_signal< bool > ap_block_state3_io;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_lv<1024> > out_r_TDATA_int;
    sc_signal< sc_logic > out_r_TVALID_int;
    sc_signal< sc_logic > out_r_TREADY_int;
    sc_signal< sc_logic > regslice_both_out_data_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_out_last_V_U_apdone_blk;
    sc_signal< sc_lv<1> > out_r_TLAST_int;
    sc_signal< sc_logic > regslice_both_out_last_V_U_ack_in_dummy;
    sc_signal< sc_logic > regslice_both_out_last_V_U_vld_out;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1024> ap_const_lv1024_lc_2;
    static const sc_lv<1024> ap_const_lv1024_lc_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_block_state1();
    void thread_ap_block_state1_io();
    void thread_ap_block_state3_io();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_io_acc_block_signal_op12();
    void thread_out_local_V_data_0_V_blk_n();
    void thread_out_local_V_data_0_V_read();
    void thread_out_local_V_data_1_V_blk_n();
    void thread_out_local_V_data_1_V_read();
    void thread_out_r_TDATA_blk_n();
    void thread_out_r_TDATA_int();
    void thread_out_r_TLAST_int();
    void thread_out_r_TVALID();
    void thread_out_r_TVALID_int();
    void thread_should_skip_0_loc_blk_n();
    void thread_should_skip_0_loc_read();
    void thread_val_assign_loc_blk_n();
    void thread_val_assign_loc_read();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
